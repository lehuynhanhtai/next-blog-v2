generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String     @id @default(cuid()) @map("_id")
  name           String?
  nickname       String?
  role           Role       @default(USER)
  slogan         String?
  email          String     @unique
  password       String?
  emailVerified  DateTime?
  image          String?    @default("https://www.gravatar.com/avatar/7141b3553643554a3c97ed69992c27a3?d=wavatar&f=y")
  backgroundUser String?
  birthDay       String?
  gender         String?
  accounts       Account[]
  sessions       Session[]
  post           Post[]
  comment        Comment[]
  chatbot        Chatbot[]
  chatRoom       Chatroom[]
  message        Messages[]
  members        Members[]
  likes          Like[]
  followers      Follow[]   @relation("follower")
  following      Follow[]   @relation("following")
}

model Follow {
  id          String @id @default(cuid()) @map("_id")
  followerId  String
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Chatroom {
  id        String     @id @default(cuid()) @map("_id")
  createdAt DateTime   @default(now())
  img       String?    @default("https://www.gravatar.com/avatar/7141b3553643554a3c97ed69992c27a3?d=wavatar&f=y")
  roomName  String
  userEmail String
  user      User       @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  messages  Messages[]
  members   Members[]
}

model Members {
  id        String   @id @default(cuid()) @map("_id")
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  roomId    String
  room      Chatroom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userEmail, roomId])
}

model Messages {
  id         String   @id @default(cuid()) @map("_id")
  createdAt  DateTime @default(now())
  text       String
  chatroomId String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  userEmail  String
  user       User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  name  String  @unique
  img   String?
  posts Post[]
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
}

model Post {
  id           String    @id @default(cuid()) @map("_id")
  createdAt    DateTime  @default(now())
  slug         String    @unique
  title        String
  content      String
  img          String?
  views        Int       @default(0)
  votes        Int       @default(0)
  categorySlug String
  category     Category  @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)
  userEmail    String
  user         User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  comments     Comment[]
  likes        Like[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  report    String?
  like      Int      @default(0)
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug], onDelete: Cascade)
  likes     Like[]
}

model Chatbot {
  id          String   @id @default(cuid()) @map("_id")
  createdAt   DateTime @default(now())
  userMessage String?
  botMessage  String?
  userEmail   String
  user        User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}
